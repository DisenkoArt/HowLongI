package com.disenkoart.howlongi.database;

import org.greenrobot.greendao.annotation.*;

import com.disenkoart.howlongi.database.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
/**
 * Entity mapped to table "TIMERS".
 */
@Entity(active = true)
public class Timers {

    @Id(autoincrement = true)
    private long id;

    @NotNull
    private String hliString;
    private int startDateTime;
    private int isArchived;
    private long gradientId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient TimersDao myDao;

    @ToOne(joinProperty = "gradientId")
    private Gradients gradients;

    @Generated
    private transient Long gradients__resolvedKey;

    @Generated
    public Timers() {
    }

    public Timers(long id) {
        this.id = id;
    }

    @Generated
    public Timers(long id, String hliString, int startDateTime, int isArchived, long gradientId) {
        this.id = id;
        this.hliString = hliString;
        this.startDateTime = startDateTime;
        this.isArchived = isArchived;
        this.gradientId = gradientId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTimersDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    @NotNull
    public String getHliString() {
        return hliString;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setHliString(@NotNull String hliString) {
        this.hliString = hliString;
    }

    public int getStartDateTime() {
        return startDateTime;
    }

    public void setStartDateTime(int startDateTime) {
        this.startDateTime = startDateTime;
    }

    public int getIsArchived() {
        return isArchived;
    }

    public void setIsArchived(int isArchived) {
        this.isArchived = isArchived;
    }

    public long getGradientId() {
        return gradientId;
    }

    public void setGradientId(long gradientId) {
        this.gradientId = gradientId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Gradients getGradients() {
        long __key = this.gradientId;
        if (gradients__resolvedKey == null || !gradients__resolvedKey.equals(__key)) {
            __throwIfDetached();
            GradientsDao targetDao = daoSession.getGradientsDao();
            Gradients gradientsNew = targetDao.load(__key);
            synchronized (this) {
                gradients = gradientsNew;
            	gradients__resolvedKey = __key;
            }
        }
        return gradients;
    }

    @Generated
    public void setGradients(Gradients gradients) {
        if (gradients == null) {
            throw new DaoException("To-one property 'gradientId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.gradients = gradients;
            gradientId = gradients.getId();
            gradients__resolvedKey = gradientId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
