package com.disenkoart.howlongi.database;

import android.os.Parcel;
import android.os.Parcelable;

import org.greenrobot.greendao.annotation.*;

import com.disenkoart.howlongi.database.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
/**
 * Entity mapped to table "TIMER".
 */
@Entity(active = true)
public class Timer implements Parcelable{

    @Id(autoincrement = true)
    private long id;

    @NotNull
    private String hliString;
    private long startDateTime;
    private int isArchived;
    private long gradientId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient TimerDao myDao;

    @ToOne(joinProperty = "gradientId")
    private Gradient gradient;

    @Generated
    private transient Long gradient__resolvedKey;

    @Generated
    public Timer() {
    }

    public Timer(long id) {
        this.id = id;
    }

    @Generated
    public Timer(long id, String hliString, long startDateTime, int isArchived, long gradientId) {
        this.id = id;
        this.hliString = hliString;
        this.startDateTime = startDateTime;
        this.isArchived = isArchived;
        this.gradientId = gradientId;
    }

    private Timer(Parcel parcel){
        this.id = parcel.readLong();
        this.hliString = parcel.readString();
        this.startDateTime = parcel.readLong();
        this.isArchived = parcel.readInt();
        this.gradientId = parcel.readLong();
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTimerDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    @NotNull
    public String getHliString() {
        return hliString;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setHliString(@NotNull String hliString) {
        this.hliString = hliString;
    }

    public long getStartDateTime() {
        return startDateTime;
    }

    public void setStartDateTime(long startDateTime) {
        this.startDateTime = startDateTime;
    }

    public int getIsArchived() {
        return isArchived;
    }

    public void setIsArchived(int isArchived) {
        this.isArchived = isArchived;
    }

    public long getGradientId() {
        return gradientId;
    }

    public void setGradientId(long gradientId) {
        this.gradientId = gradientId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Gradient getGradient() {
        long __key = this.gradientId;
        if (gradient__resolvedKey == null || !gradient__resolvedKey.equals(__key)) {
            __throwIfDetached();
            GradientDao targetDao = daoSession.getGradientDao();
            Gradient gradientNew = targetDao.load(__key);
            synchronized (this) {
                gradient = gradientNew;
            	gradient__resolvedKey = __key;
            }
        }
        return gradient;
    }

    @Generated
    public void setGradient(Gradient gradient) {
        if (gradient == null) {
            throw new DaoException("To-one property 'gradientId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.gradient = gradient;
            gradientId = gradient.getId();
            gradient__resolvedKey = gradientId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel parcel, int i) {
        parcel.writeLong(id);
        parcel.writeString(hliString);
        parcel.writeLong(startDateTime);
        parcel.writeInt(isArchived);
        parcel.writeLong(gradientId);
    }

    public static final Parcelable.Creator<Timer> CREATOR = new Parcelable.Creator<Timer>(){

        @Override
        public Timer createFromParcel(Parcel parcel) {
            return new Timer(parcel);
        }

        @Override
        public Timer[] newArray(int i) {
            return new Timer[i];
        }
    };
}
